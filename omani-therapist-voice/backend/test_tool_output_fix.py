#!/usr/bin/env python3
"""
Quick test to verify that enhanced prompts prevent tool output verbalization.
"""

import sys
import os

# Add backend directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config.therapy_agent_manager import (
    GENERAL_THERAPY_INSTRUCTION,
    CRISIS_INTERVENTION_INSTRUCTION,
    CBT_SPECIALIST_INSTRUCTION
)

def test_tool_output_verbalization_prevention():
    """Test that all prompts contain instructions to prevent tool output verbalization."""
    
    # Check that all prompts contain the critical rule
    prompts = {
        "General Therapy": GENERAL_THERAPY_INSTRUCTION,
        "Crisis Intervention": CRISIS_INTERVENTION_INSTRUCTION,
        "CBT Specialist": CBT_SPECIALIST_INSTRUCTION
    }
    
    required_phrases = [
        "NEVER VERBALIZE TOOL OUTPUTS",
        "tool_outputs",
        "NEVER speak",
        "Use tool data to inform",
        "speak naturally"
    ]
    
    results = {}
    
    for prompt_name, prompt_text in prompts.items():
        results[prompt_name] = {}
        
        for phrase in required_phrases:
            if phrase.lower() in prompt_text.lower():
                results[prompt_name][phrase] = "‚úÖ FOUND"
            else:
                results[prompt_name][phrase] = "‚ùå MISSING"
    
    # Print results
    print("üß™ TOOL OUTPUT VERBALIZATION PREVENTION TEST")
    print("=" * 60)
    
    all_good = True
    
    for prompt_name, checks in results.items():
        print(f"\nüìã {prompt_name} Prompt:")
        for phrase, status in checks.items():
            print(f"  {status} {phrase}")
            if "‚ùå" in status:
                all_good = False
    
    # Check for specific examples
    print(f"\nüîç SPECIFIC EXAMPLE CHECKS:")
    
    # Check for "NEVER say" examples
    never_say_examples = [
        "NEVER say: \"tool_outputs",
        "üö´ NEVER say:",
        "‚úÖ INSTEAD:"
    ]
    
    for prompt_name, prompt_text in prompts.items():
        print(f"\nüìù {prompt_name} Examples:")
        for example in never_say_examples:
            if example.lower() in prompt_text.lower():
                print(f"  ‚úÖ Contains: {example}")
            else:
                print(f"  ‚ùå Missing: {example}")
                all_good = False
    
    # Overall result
    print(f"\n" + "=" * 60)
    if all_good:
        print("üéâ SUCCESS: All prompts properly prevent tool output verbalization!")
        print("‚úÖ Enhanced prompts should fix the voice output issue.")
    else:
        print("‚ö†Ô∏è  WARNING: Some prompts missing critical instructions.")
        print("‚ùå May still have tool output verbalization issues.")
    
    return all_good

def check_example_quality():
    """Check that the examples show proper natural responses."""
    
    print(f"\nüìö EXAMPLE QUALITY CHECK:")
    print("=" * 60)
    
    # Check General Therapy example
    if "I can feel the pain in your words, my dear" in GENERAL_THERAPY_INSTRUCTION:
        print("‚úÖ General Therapy: Contains natural therapeutic response example")
    else:
        print("‚ùå General Therapy: Missing natural response example")
    
    # Check Crisis Intervention example  
    if "Your safety is the most important thing to me" in CRISIS_INTERVENTION_INSTRUCTION:
        print("‚úÖ Crisis Intervention: Contains empathetic crisis response example")
    else:
        print("‚ùå Crisis Intervention: Missing empathetic response example")
    
    # Check CBT Specialist example
    if "I hear the pain in your words" in CBT_SPECIALIST_INSTRUCTION:
        print("‚úÖ CBT Specialist: Contains natural CBT response example")
    else:
        print("‚ùå CBT Specialist: Missing natural response example")
    
    # Check for Arabic integration
    arabic_phrases = ["ÿ≠ÿ®Ÿäÿ®Ÿä", "ÿ£ÿ≥ÿ™ÿ∑Ÿäÿπ ÿ£ŸÜ ÿ£ÿ≥ŸÖÿπ", "ÿßŸÑŸÑŸá"]
    arabic_found = 0
    
    for prompt_name, prompt_text in [
        ("General", GENERAL_THERAPY_INSTRUCTION),
        ("Crisis", CRISIS_INTERVENTION_INSTRUCTION), 
        ("CBT", CBT_SPECIALIST_INSTRUCTION)
    ]:
        for phrase in arabic_phrases:
            if phrase in prompt_text:
                arabic_found += 1
                break
    
    print(f"üá¥üá≤ Arabic Integration: {arabic_found}/3 prompts contain Arabic expressions")

if __name__ == "__main__":
    print("üöÄ Testing Enhanced Prompts for Tool Output Fix")
    
    # Run main test
    success = test_tool_output_verbalization_prevention()
    
    # Check example quality
    check_example_quality()
    
    print(f"\nüí° SUMMARY:")
    print("=" * 60)
    print("The enhanced prompts now contain explicit instructions to:")
    print("1. ‚úÖ NEVER verbalize raw tool outputs like {'emotions': ['nervousness']}")
    print("2. ‚úÖ Process tool data internally to inform responses") 
    print("3. ‚úÖ Speak naturally with therapeutic empathy")
    print("4. ‚úÖ Include cultural expressions and Islamic concepts")
    print("5. ‚úÖ Provide clear examples of proper vs improper responses")
    
    if success:
        print(f"\nüéØ RESULT: Enhanced prompts should fix the tool output verbalization issue!")
        print("The AI will now use tool insights to provide natural therapeutic responses.")
    else:
        print(f"\n‚ö†Ô∏è  RESULT: Some issues detected - may need further refinement.")
    
    sys.exit(0 if success else 1) 